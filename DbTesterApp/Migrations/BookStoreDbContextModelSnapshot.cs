// <auto-generated />
using DbTesterApp.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbTesterApp.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    partial class BookStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DbTesterApp.Models.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibraryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DbTesterApp.Models.Library", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("DbTesterApp.Models.Number", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PointId");

                    b.ToTable("Numbers");
                });

            modelBuilder.Entity("DbTesterApp.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("DbTesterApp.Models.Point", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VectorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("VectorId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("DbTesterApp.Models.Vector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vectors");
                });

            modelBuilder.Entity("DbTesterApp.Models.Worker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibraryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Salary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("DbTesterApp.Models.Book", b =>
                {
                    b.HasOne("DbTesterApp.Models.Library", null)
                        .WithMany("Books")
                        .HasForeignKey("LibraryId");
                });

            modelBuilder.Entity("DbTesterApp.Models.Library", b =>
                {
                    b.HasOne("DbTesterApp.Models.Organization", null)
                        .WithMany("Libraries")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("DbTesterApp.Models.Number", b =>
                {
                    b.HasOne("DbTesterApp.Models.Point", null)
                        .WithMany("Values")
                        .HasForeignKey("PointId");
                });

            modelBuilder.Entity("DbTesterApp.Models.Point", b =>
                {
                    b.HasOne("DbTesterApp.Models.Vector", null)
                        .WithMany("Values")
                        .HasForeignKey("VectorId");
                });

            modelBuilder.Entity("DbTesterApp.Models.Worker", b =>
                {
                    b.HasOne("DbTesterApp.Models.Library", null)
                        .WithMany("Workers")
                        .HasForeignKey("LibraryId");

                    b.HasOne("DbTesterApp.Models.Organization", null)
                        .WithMany("Workers")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("DbTesterApp.Models.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("DbTesterApp.Models.Organization", b =>
                {
                    b.Navigation("Libraries");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("DbTesterApp.Models.Point", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("DbTesterApp.Models.Vector", b =>
                {
                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
